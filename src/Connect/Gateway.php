<?php

namespace RM_PagSeguro\Connect;

use RM_PagSeguro\Connect;
use RM_PagSeguro\Helpers\Api;
use RM_PagSeguro\Helpers\Pix;
use WC_Payment_Gateway_CC;

/**
 * Class Gateway
 *
 * @author    Ricardo Martins <ricardo@magenteiro.com>
 * @copyright 2023 Magenteiro
 */
class Gateway extends WC_Payment_Gateway_CC
{
    
    public function __construct()
    {
        $this->id = Connect::DOMAIN;
        $this->icon = apply_filters('wc_pagseguro_connect_icon', plugins_url('public/images/pagseguro.svg', WC_PAGSEGURO_CONNECT_PLUGIN_FILE));
        $this->has_fields = true;
        $this->method_title = __('PagSeguro Connect by Ricardo Martins', Connect::DOMAIN);
        $this->method_description = __('Accept all PagSeguro Payments and save on taxes and transaction fees', Connect::DOMAIN);
        $this->supports = array(
            'products',
            'refunds',
//            'default_credit_card_form',
//            'tokenization'
        );
        
        $this->init_settings();
        
        $this->title = $this->get_option('title', __('PagSeguro UOL', Connect::DOMAIN));
        $this->description = $this->get_option('description');
        
        
        add_action('woocommerce_update_options_payment_gateways_' . $this->id, array($this, 'process_admin_options'));
        add_action('woocommerce_thankyou_' . $this->id, array($this, 'thankyou_instructions'));
        add_action('wp_enqueue_scripts', array($this, 'add_styles'));
        add_action('wp_enqueue_scripts', array($this, 'add_scripts'));
        add_action('admin_enqueue_scripts', array($this, 'admin_styles'));
        add_action('admin_enqueue_scripts', array($this, 'admin_scripts'));
    }

    public function init_settings(){
        $fields = [];
        $fields[] = include WC_PAGSEGURO_CONNECT_BASE_DIR.'/admin/settings/general-fields.php';
        $fields[] = include WC_PAGSEGURO_CONNECT_BASE_DIR.'/admin/settings/boleto-fields.php';
        $fields[] = include WC_PAGSEGURO_CONNECT_BASE_DIR.'/admin/settings/pix-fields.php';
        $this->form_fields = array_merge(...$fields);
        
        parent::init_settings();
    }
    
    
    public function admin_options() {
        $suffix = defined( 'SCRIPT_DEBUG' ) && SCRIPT_DEBUG ? '' : '.min';

//        wp_enqueue_script( 'pagseguro-admin', plugins_url( 'public/js/admin/admin' . $suffix . '.js', plugin_dir_path( __FILE__ ) ), array( 'jquery' ), WC_PAGSEGURO_VERSION, true );

        include WC_PAGSEGURO_CONNECT_BASE_DIR.'/admin/views/html-admin-page.php';
//        parent::admin_options();
    }

    /**
     * Returns a table with the fields for the admin settings page in the specified $section
     * @param $section (general, pix, cc, or boleto)
     *
     * @return string|void
     */
    public function get_admin_fields($section){
        $available_sections = array('general', 'pix', 'cc', 'boleto');
        if (!in_array($section, $available_sections)) {
            return;
        }
        
        $fields = include WC_PAGSEGURO_CONNECT_BASE_DIR.'/admin/settings/' . $section . '-fields.php';
        $form_fields = apply_filters(
            'woocommerce_settings_api_form_fields_'.$this->id,
            array_map(array($this, 'set_defaults'), $fields)
        );
        return '<table class="form-table">'.$this->generate_settings_html($form_fields, false)
            .'</table>'; // WPCS: XSS ok.
    }

    /**
     * Checks if the gateway is available for use with the current currency settings.
     * @return bool
     */
    public function is_valid_for_use(): bool
    {
        return in_array(
            get_woocommerce_currency(),
            apply_filters(
                'woocommerce_pagseguro_connect_supported_currencies',
                array( 'BRL' )
            ),
            true
        );
    }
    
    
    public function process_admin_options()
    {
        return parent::process_admin_options(); // TODO: Change the autogenerated stub
    }

    /**
     * Checks if the currency is BRL
     * @return bool
     */
    public static function using_supported_currency(): bool {
        return 'BRL' === get_woocommerce_currency();
    }

    /**
     * @inheritDoc
     */
    public function form() {
        echo "<p>PIX</p>";
    }

    /**
     * Validate frontend fields
     *
     * @return bool
     */
    public function validate_fields():bool
    {
        return true; //@TODO validate_fields
    }
    
    public function add_styles(){
        //thankyou page
        if (is_order_received_page()) {
            wp_enqueue_style(
                'pagseguro-connect-pix',
                plugins_url('public/css/pix.css', WC_PAGSEGURO_CONNECT_PLUGIN_FILE)
            );
        }
    }
    
    public function add_scripts(){
        if (is_order_received_page()) {
            wp_enqueue_script('pagseguro-connect-pix', plugins_url('public/js/pix-success.js', WC_PAGSEGURO_CONNECT_PLUGIN_FILE));
        }
    }
    
    public function admin_styles(){
        //admin pages
        if (!is_admin())
            return;
        
        wp_enqueue_style(
            'pagseguro-connect-admin-css',
            plugins_url('public/css/ps-connect-admin.css', WC_PAGSEGURO_CONNECT_PLUGIN_FILE)
        );
        
    }
    
    public function admin_scripts(){
        if(!is_admin())
            return;

        wp_enqueue_script(
            'pagseguro-connect-admin',
            plugins_url('public/js/admin/ps-connect-admin.js', WC_PAGSEGURO_CONNECT_PLUGIN_FILE)
        );
    }

    /**
     * Process Payment.
     *
     * @param int $order_id Order ID.
     * @return array
     */
    public function process_payment($order_id): array
    {
        global $woocommerce;
        $order = wc_get_order( $order_id );


        $pixHelper = new Pix();
        $params = $pixHelper->extractPixRequestParams($order);
        $api = new Api();
        $resp = $api->post('ws/orders', $params);

        $order->add_meta_data('pagseguro_qrcode', $resp->qr_codes[0]->links[0]->href);
        $order->add_meta_data('pagseguro_qrcode_text', $resp->qr_codes[0]->text);
        $order->add_meta_data('pagseguro_qrcode_expiration', $resp->qr_codes[0]->expiration_date);
        $order->add_meta_data('pagseguro_order_id', $resp->id);
        // some notes to customer (replace true with false to make it private)
        $order->add_order_note( 'Pedido gerado com sucesso!', true );

        $order->payment_complete();
        wc_reduce_stock_levels($order_id);
        $woocommerce->cart->empty_cart();
        return array(
            'result' => 'success',
            'redirect' => $this->get_return_url($order)
        );
    }
    public function payment_fields()
    {
        parent::payment_fields(); // TODO: Change the autogenerated stub
    }

    public function thankyou_instructions($order_id)
    {

        $qr_code = get_post_meta($order_id, 'pagseguro_qrcode', true);
        $qr_code_text = get_post_meta($order_id, 'pagseguro_qrcode_text', true);
        $qr_code_exp = get_post_meta($order_id, 'pagseguro_qrcode_expiration', true);
        require_once dirname(__FILE__) . '/../templates/pix-instructions.php';
    }
}